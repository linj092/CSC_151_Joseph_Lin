
//THIS IS BINARY CONVERSION PURELY FOR FUN
public void binaryConversion(int primary){
    //creates a method in which primary is the users input
    String response = "";
    //create response that will be printed out carrying the binary numbers
    int tempprimary = primary;
    //create temporary primary variable that will be the primary variable but edited in the method
    int temp;

    if (primary == 0){
        System.out.println( "0");
    //if statement created to make sure that the value inserted is not 0
    }
    while (tempprimary > 0){
    //while tempprimary is greater than 0
        temp = (int)(tempprimary % 2);
        tempprimary = (tempprimary/2);
    //temp is tempprimary's remainder after being divided by 2, tempprimary is then divided by two and java automatically rounds it down.

        if (temp == 1){
        response = response + "1";
    //if the temp remainder is 1, indicating there is more afterwards, "1" is added onto the binary response
        }
        else{ 
        response = response + "0";
   //if the temp remainder is 0, indicating there is no remainder thus no necessary to add a 1, "0" is added
    }}
//while statement ends when tempprimary is = 0
String original = response;
String reverse = "";
for (int i = 0; i < response.length(); i++){
    reverse = original.charAt(i) + reverse;
}
    System.out.println ("The binary for " + primary + " is " + reverse);
//prints the final result using the final response after the while function ends.
}

//selection sort
public void sortArray(int[] args){
    int a = args.length;
//creates an integar equal to the length of the array
    for (int i = 0; i < a - 1; i++){
//runs a For statement that creates and integar with the set value of 0, as long as the value is less than the array length within boundary, run the command and increment
    int max = i;
//creates an integar min that will be holding the the value i when it is used to swap around
        for (int f = i + 1; f < args.length; f++){
//runs a For statement that creates and integar with the set value of 1, as long as the value is less than the array length, run the command and increment
        if (args[max] < args[f]){
            max = f;
        }
      }
      int temp = args[max];
        args[max] = args[i];
        args[i] = temp;
    }
}
//UNFINISHED